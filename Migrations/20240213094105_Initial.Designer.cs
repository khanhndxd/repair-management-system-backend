// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using repair_management_backend.Data;

#nullable disable

namespace repair_management_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240213094105_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dd1bcdad-35e4-486e-ad63-19aca5e80e35",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "009bcfb0-bcab-40c9-a759-bbb55562519e",
                            Name = "Creator",
                            NormalizedName = "CREATOR"
                        },
                        new
                        {
                            Id = "a7d13cf3-9de4-4736-8bf2-d9fafcc1a232",
                            Name = "Receiver",
                            NormalizedName = "RECEIVER"
                        },
                        new
                        {
                            Id = "c896a667-3ea4-4b98-af9d-2545ea4b188c",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "dd1bcdad-35e4-486e-ad63-19aca5e80e35"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "009bcfb0-bcab-40c9-a759-bbb55562519e"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "a7d13cf3-9de4-4736-8bf2-d9fafcc1a232"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "a7d13cf3-9de4-4736-8bf2-d9fafcc1a232"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "c896a667-3ea4-4b98-af9d-2545ea4b188c"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "c896a667-3ea4-4b98-af9d-2545ea4b188c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("repair_management_backend.Models.Accessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Accessories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "RAM DDR4 8GB",
                            Price = 1000000.0,
                            Unit = "Thanh"
                        },
                        new
                        {
                            Id = 2,
                            Name = "RAM DDR4 16GB",
                            Price = 3000000.0,
                            Unit = "Thanh"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RAM DDR4 32GB",
                            Price = 5000000.0,
                            Unit = "Thanh"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ổ cứng HDD 250GB",
                            Price = 1500000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ổ cứng HDD 500GB",
                            Price = 3000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ổ cứng HDD 1TB",
                            Price = 6000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ổ cứng SSD 120GB",
                            Price = 3000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ổ cứng SSD 240GB",
                            Price = 6000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ổ cứng SSD 500GB",
                            Price = 12000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Nguồn Corsair CX450M",
                            Price = 1500000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Nguồn Antec VP550",
                            Price = 2000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Nguồn Seasonic Focus GX-550",
                            Price = 2500000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Nguồn Gigabyte P650B",
                            Price = 3000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Nguồn EVGA SuperNOVA GA650",
                            Price = 3500000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Màn hình Acer Nitro VG240Y",
                            Price = 4000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Màn hình ASUS TUF Gaming VG24VQ",
                            Price = 5000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Màn hình Dell S2722DGM",
                            Price = 6000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Màn hình Samsung Odyssey G32T550",
                            Price = 7000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Màn hình LG UltraGear 27GN600-B",
                            Price = 8000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Logitech C920 HD Pro",
                            Price = 4500000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Logitech Brio 4K",
                            Price = 9000000.0,
                            Unit = "Chiếc"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Razer Kiyo Pro",
                            Price = 12000000.0,
                            Unit = "Chiếc"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Màn hình"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nguồn máy tính"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mainboard"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chuột"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bàn phím"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Thiết bị lưu trữ, bộ nhớ"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tai nghe"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CPU"
                        },
                        new
                        {
                            Id = 9,
                            Name = "VGA"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tản nhiệt"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Card màn hình"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Webcam"
                        },
                        new
                        {
                            Id = 13,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Thiết bị ngoại vi"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "97 HAO NAM, P.O CHO DUA, DONG DA, HA NOI",
                            Email = "nguyenvana@gmail.com",
                            Name = "Nguyễn Văn A",
                            Note = "",
                            Phone = "0123456789"
                        },
                        new
                        {
                            Id = 2,
                            Address = "30 HANG BONG, HANG GAI, HOAN KIEM, HA NOI",
                            Email = "daovanb@gmail.com",
                            Name = "Đào Văn B",
                            Note = "",
                            Phone = "9485769278"
                        },
                        new
                        {
                            Id = 3,
                            Address = "6 NGACH 371/9 KIM MA, BA DINH, HA NOI",
                            Email = "nguyenmanhc@gmail.com",
                            Name = "Nguyễn Mạnh C",
                            Note = "",
                            Phone = "0293847562"
                        },
                        new
                        {
                            Id = 4,
                            Address = "SO 48 LE DAI HANH, HA BA TRUNG, HA NOI",
                            Email = "buivand@gmail.com",
                            Name = "Bùi Văn D",
                            Note = "",
                            Phone = "0192845924"
                        },
                        new
                        {
                            Id = 5,
                            Address = "110 NGUYEN NGOC NAI, KHUONG MAI, T.XUAN, HN",
                            Email = "phamvane@gmail.com",
                            Name = "Phạm Văn E",
                            Note = "",
                            Phone = "0495867284"
                        },
                        new
                        {
                            Id = 6,
                            Address = "65B HAI BA TRUNG, HOAN KIEM, HA NOI",
                            Email = "nguyenhuyg@gmail.com",
                            Name = "Nguyễn Huy G",
                            Note = "",
                            Phone = "0394857624"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.CustomerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Corsair"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dell"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Acer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ASUS"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Kingston"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Logitech"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Razer"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Intel"
                        },
                        new
                        {
                            Id = 9,
                            Name = "AMD"
                        },
                        new
                        {
                            Id = 10,
                            Name = "LG"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("PurchaseOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 13, 16, 41, 4, 850, DateTimeKind.Local).AddTicks(4887),
                            CustomerId = 1,
                            Total = 1200000.0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 13, 16, 41, 4, 850, DateTimeKind.Local).AddTicks(4907),
                            CustomerId = 2,
                            Total = 1600000.0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 13, 16, 41, 4, 850, DateTimeKind.Local).AddTicks(4909),
                            CustomerId = 3,
                            Total = 2400000.0
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchasedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductSerial")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchasedProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ManufacturerId = 1,
                            Price = 1500000.0,
                            ProductName = "Nguồn Corsair CX450M",
                            ProductSerial = "8887",
                            PurchaseOrderId = 1,
                            WarrantyPeriod = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            ManufacturerId = 2,
                            Price = 6000000.0,
                            ProductName = "Màn hình Dell S2722DGM",
                            ProductSerial = "8888",
                            PurchaseOrderId = 2,
                            WarrantyPeriod = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 12,
                            ManufacturerId = 6,
                            Price = 4500000.0,
                            ProductName = "Logitech C920 HD Pro",
                            ProductSerial = "8889",
                            PurchaseOrderId = 3,
                            WarrantyPeriod = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 6,
                            ManufacturerId = 5,
                            Price = 3000000.0,
                            ProductName = "Ổ cứng HDD 500GB",
                            ProductSerial = "8890",
                            PurchaseOrderId = 1,
                            WarrantyPeriod = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            ManufacturerId = 10,
                            Price = 8000000.0,
                            ProductName = "Màn hình LG UltraGear 27GN600-B",
                            ProductSerial = "8891",
                            PurchaseOrderId = 1,
                            WarrantyPeriod = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            ManufacturerId = 5,
                            Price = 5000000.0,
                            ProductName = "RAM DDR4 32GB",
                            ProductSerial = "8892",
                            PurchaseOrderId = 2,
                            WarrantyPeriod = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 12,
                            ManufacturerId = 7,
                            Price = 12000000.0,
                            ProductName = "Razer Kiyo Pro",
                            ProductSerial = "8893",
                            PurchaseOrderId = 3,
                            WarrantyPeriod = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            ManufacturerId = 2,
                            Price = 6000000.0,
                            ProductName = "Màn hình Dell S2722DGM",
                            ProductSerial = "8894",
                            PurchaseOrderId = 3,
                            WarrantyPeriod = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairAccessory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RepairOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryId");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairAccessories");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairCustomerProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerProductId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RepairOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProductId");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairCustomerProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RepairOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairLogs");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReceiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiveType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReceivedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepairReasonId")
                        .HasColumnType("int");

                    b.Property<int>("RepairTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RepairedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("RepairReasonId");

                    b.HasIndex("RepairTypeId");

                    b.HasIndex("RepairedById");

                    b.HasIndex("StatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PurchasedProductId")
                        .HasColumnType("int");

                    b.Property<int>("RepairOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchasedProductId");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("RepairProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RepairReasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Reason = "Lỗi phần mềm"
                        },
                        new
                        {
                            Id = 2,
                            Reason = "Đổi mới"
                        },
                        new
                        {
                            Id = 3,
                            Reason = "Lỗi phần cứng"
                        },
                        new
                        {
                            Id = 4,
                            Reason = "Hỏng hóc, va đập"
                        },
                        new
                        {
                            Id = 5,
                            Reason = "Khác"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RepairOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderId");

                    b.HasIndex("TaskId");

                    b.ToTable("RepairTasks");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RepairTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bảo hành"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sửa chữa"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Đổi mới"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chờ xử lý"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Đã tiếp nhận"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Đang sửa chữa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Đã chuyển sản phẩm về hãng"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đã nhận sản phẩm từ hãng"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Đã sửa xong"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Đã hủy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Đã hoàn thành"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Đã trả hàng"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vệ sinh sản phẩm",
                            Price = 100000.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cài đặt phần mềm",
                            Price = 50000.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sửa chữa phần mềm",
                            Price = 100000.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Thay thế linh kiện",
                            Price = 100000.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Đổi mới",
                            Price = 0.0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sửa chữa phần cứng",
                            Price = 200000.0
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.WarrantyPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("WarrantyPolicies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Chính sách bảo hành của Màn hình"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Chính sách bảo hành của Nguồn máy tính"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Chính sách bảo hành của Mainboard"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "Chính sách bảo hành của Chuột"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "Chính sách bảo hành của Bàn phím"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            Description = "Chính sách bảo hành của Thiết bị lưu trữ, bộ nhớ"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Description = "Chính sách bảo hành của Tai nghe"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Description = "Chính sách bảo hành của CPU"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Description = "Chính sách bảo hành của VGA"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 10,
                            Description = "Chính sách bảo hành của Tản nhiệt"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 11,
                            Description = "Chính sách bảo hành của Card màn hình"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 12,
                            Description = "Chính sách bảo hành của Webcam"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 13,
                            Description = "Chính sách bảo hành của PC"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 14,
                            Description = "Chính sách bảo hành của Thiết bị ngoại vi"
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.WarrantyPolicyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("WarrantyPolicyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WarrantyPolicyId");

                    b.ToTable("WarrantyPolicyTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskId = 4,
                            WarrantyPolicyId = 1
                        },
                        new
                        {
                            Id = 2,
                            TaskId = 6,
                            WarrantyPolicyId = 1
                        },
                        new
                        {
                            Id = 3,
                            TaskId = 4,
                            WarrantyPolicyId = 2
                        },
                        new
                        {
                            Id = 4,
                            TaskId = 6,
                            WarrantyPolicyId = 2
                        },
                        new
                        {
                            Id = 5,
                            TaskId = 4,
                            WarrantyPolicyId = 3
                        },
                        new
                        {
                            Id = 6,
                            TaskId = 6,
                            WarrantyPolicyId = 3
                        },
                        new
                        {
                            Id = 7,
                            TaskId = 4,
                            WarrantyPolicyId = 4
                        },
                        new
                        {
                            Id = 8,
                            TaskId = 5,
                            WarrantyPolicyId = 4
                        },
                        new
                        {
                            Id = 9,
                            TaskId = 6,
                            WarrantyPolicyId = 4
                        },
                        new
                        {
                            Id = 10,
                            TaskId = 4,
                            WarrantyPolicyId = 5
                        },
                        new
                        {
                            Id = 11,
                            TaskId = 5,
                            WarrantyPolicyId = 5
                        },
                        new
                        {
                            Id = 12,
                            TaskId = 6,
                            WarrantyPolicyId = 5
                        },
                        new
                        {
                            Id = 13,
                            TaskId = 4,
                            WarrantyPolicyId = 6
                        },
                        new
                        {
                            Id = 14,
                            TaskId = 5,
                            WarrantyPolicyId = 6
                        },
                        new
                        {
                            Id = 15,
                            TaskId = 4,
                            WarrantyPolicyId = 7
                        },
                        new
                        {
                            Id = 16,
                            TaskId = 5,
                            WarrantyPolicyId = 7
                        },
                        new
                        {
                            Id = 17,
                            TaskId = 5,
                            WarrantyPolicyId = 8
                        },
                        new
                        {
                            Id = 18,
                            TaskId = 4,
                            WarrantyPolicyId = 9
                        },
                        new
                        {
                            Id = 19,
                            TaskId = 5,
                            WarrantyPolicyId = 9
                        },
                        new
                        {
                            Id = 20,
                            TaskId = 4,
                            WarrantyPolicyId = 10
                        },
                        new
                        {
                            Id = 21,
                            TaskId = 6,
                            WarrantyPolicyId = 10
                        },
                        new
                        {
                            Id = 22,
                            TaskId = 4,
                            WarrantyPolicyId = 11
                        },
                        new
                        {
                            Id = 23,
                            TaskId = 5,
                            WarrantyPolicyId = 11
                        },
                        new
                        {
                            Id = 24,
                            TaskId = 6,
                            WarrantyPolicyId = 11
                        },
                        new
                        {
                            Id = 25,
                            TaskId = 5,
                            WarrantyPolicyId = 12
                        },
                        new
                        {
                            Id = 26,
                            TaskId = 6,
                            WarrantyPolicyId = 12
                        },
                        new
                        {
                            Id = 27,
                            TaskId = 4,
                            WarrantyPolicyId = 13
                        },
                        new
                        {
                            Id = 28,
                            TaskId = 6,
                            WarrantyPolicyId = 13
                        },
                        new
                        {
                            Id = 29,
                            TaskId = 4,
                            WarrantyPolicyId = 14
                        },
                        new
                        {
                            Id = 30,
                            TaskId = 5,
                            WarrantyPolicyId = 11
                        });
                });

            modelBuilder.Entity("repair_management_backend.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06030b66-424c-4f7d-9e25-a17a4a17dcc9",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "NGUYỄN DUY KHÁNH",
                            PasswordHash = "AQAAAAIAAYagAAAAEGIAyXs0SMwJnHGrmygTmK8t5MQhpdilfrL7HFsc0A072ZFavsc1hGxXtVJLyHo25Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Duy Khánh",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0554bdec-abaa-48a2-86b1-4c633d448f45",
                            Email = "creator1@creator.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CREATOR1@CREATOR.COM",
                            NormalizedUserName = "NGUYỄN HOÀNG A",
                            PasswordHash = "AQAAAAIAAYagAAAAEONyZfgmtTLW4Evv19Be2SNzMh3uh7cqQDycwZE4wSIdPg5PeSRTOOmOIxHOsro3DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Hoàng A",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92fd44cb-4f04-495e-b2e9-dc4b5fb2d707",
                            Email = "receiver1@receiver.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEIVER1@RECEIVER.COM",
                            NormalizedUserName = "NGUYỄN VĂN HOÀNG",
                            PasswordHash = "AQAAAAIAAYagAAAAECPnEH0pTCpayp/DElveZfTQ/kvgIMjEIT65yTJNJrVcyMzMvityB9E3GVpHJCV7Ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Văn Hoàng",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e75d5485-4d6e-45f3-a491-6b7032fe2b4c",
                            Email = "receiver2@receiver.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEIVER2@RECEIVER.COM",
                            NormalizedUserName = "NGUYỄN HOÀNG KHOA",
                            PasswordHash = "AQAAAAIAAYagAAAAEIGi/y76/1CTr3z5JHZg4+wcO0Vgn4ds1Z8kS6d7czrhctOvgFxjGzBuC17P+Mv3Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Hoàng Khoa",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e359824-3a2e-4e7c-b220-1a547e169a5b",
                            Email = "tech1@tech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECH1@TECH.COM",
                            NormalizedUserName = "NGUYỄN DUY QUANG",
                            PasswordHash = "AQAAAAIAAYagAAAAEL8q2Mz2WlbnmetAaZaDluAiinejGI+OXemtgDx1S+67L26bXjVQ5QJ8dIf8jFEKPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Duy Quang",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a590615e-3d85-4da5-94f8-61c530783b96",
                            Email = "tech2@tech.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TECH2@TECH.COM",
                            NormalizedUserName = "NGUYỄN THẾ HUY",
                            PasswordHash = "AQAAAAIAAYagAAAAEIebcVVn1ErGJ+qW6syhmswMW7bU9fvSaGbfc1j7hAOCX/xrTdIzqmXONavHlZT++Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Nguyễn Thế Huy",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("repair_management_backend.Models.CustomerProduct", b =>
                {
                    b.HasOne("repair_management_backend.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchaseOrder", b =>
                {
                    b.HasOne("repair_management_backend.Models.Customer", "Customer")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchasedProduct", b =>
                {
                    b.HasOne("repair_management_backend.Models.Category", "Category")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.Manufacturer", "Manufacturer")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseProducts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Manufacturer");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairAccessory", b =>
                {
                    b.HasOne("repair_management_backend.Models.Accessory", "Accessory")
                        .WithMany("RepairAccessories")
                        .HasForeignKey("AccessoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairOrder", "RepairOrder")
                        .WithMany("RepairAccessories")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accessory");

                    b.Navigation("RepairOrder");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairCustomerProduct", b =>
                {
                    b.HasOne("repair_management_backend.Models.CustomerProduct", "CustomerProduct")
                        .WithMany()
                        .HasForeignKey("CustomerProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairOrder", "RepairOrder")
                        .WithMany("RepairCustomerProducts")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CustomerProduct");

                    b.Navigation("RepairOrder");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairLog", b =>
                {
                    b.HasOne("repair_management_backend.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairOrder", null)
                        .WithMany("RepairLogs")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairOrder", b =>
                {
                    b.HasOne("repair_management_backend.Models.User", "CreatedBy")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.Customer", "Customer")
                        .WithMany("RepairOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.User", "ReceivedBy")
                        .WithMany("ReceivedOrders")
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairReason", "RepairReason")
                        .WithMany("RepairOrders")
                        .HasForeignKey("RepairReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairType", "RepairType")
                        .WithMany("RepairOrders")
                        .HasForeignKey("RepairTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.User", "RepairedBy")
                        .WithMany("RepairedOrders")
                        .HasForeignKey("RepairedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.Status", "Status")
                        .WithMany("RepairOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.Task", null)
                        .WithMany("RepairOrders")
                        .HasForeignKey("TaskId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");

                    b.Navigation("ReceivedBy");

                    b.Navigation("RepairReason");

                    b.Navigation("RepairType");

                    b.Navigation("RepairedBy");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairProduct", b =>
                {
                    b.HasOne("repair_management_backend.Models.PurchasedProduct", "PurchasedProduct")
                        .WithMany("RepairProducts")
                        .HasForeignKey("PurchasedProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.RepairOrder", "RepairOrder")
                        .WithMany("RepairProducts")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PurchasedProduct");

                    b.Navigation("RepairOrder");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairTask", b =>
                {
                    b.HasOne("repair_management_backend.Models.RepairOrder", "RepairOrder")
                        .WithMany("RepairTasks")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RepairOrder");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("repair_management_backend.Models.WarrantyPolicy", b =>
                {
                    b.HasOne("repair_management_backend.Models.Category", null)
                        .WithOne("WarrantyPolicy")
                        .HasForeignKey("repair_management_backend.Models.WarrantyPolicy", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("repair_management_backend.Models.WarrantyPolicyTask", b =>
                {
                    b.HasOne("repair_management_backend.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("repair_management_backend.Models.WarrantyPolicy", "WarrantyPolicy")
                        .WithMany()
                        .HasForeignKey("WarrantyPolicyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("WarrantyPolicy");
                });

            modelBuilder.Entity("repair_management_backend.Models.Accessory", b =>
                {
                    b.Navigation("RepairAccessories");
                });

            modelBuilder.Entity("repair_management_backend.Models.Category", b =>
                {
                    b.Navigation("PurchasedProducts");

                    b.Navigation("WarrantyPolicy")
                        .IsRequired();
                });

            modelBuilder.Entity("repair_management_backend.Models.Customer", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.Manufacturer", b =>
                {
                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.PurchasedProduct", b =>
                {
                    b.Navigation("RepairProducts");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairOrder", b =>
                {
                    b.Navigation("RepairAccessories");

                    b.Navigation("RepairCustomerProducts");

                    b.Navigation("RepairLogs");

                    b.Navigation("RepairProducts");

                    b.Navigation("RepairTasks");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairReason", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.RepairType", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.Status", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.Task", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("repair_management_backend.Models.User", b =>
                {
                    b.Navigation("CreatedOrders");

                    b.Navigation("ReceivedOrders");

                    b.Navigation("RepairedOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
